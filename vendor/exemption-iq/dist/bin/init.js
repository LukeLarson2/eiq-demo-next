#!/usr/bin/env node
import e from"fs";import t from"path";import P from"readline";import C from"strip-json-comments";const A={certificate:["certificate","[id]","route.ts"],token:["gencert","token","route.ts"],validate:["validate","route.ts"],customer:["customer","route.ts"],certificates:["certificates","route.ts"],session:["session","route.ts"]},k=P.createInterface({input:process.stdin,output:process.stdout}),a=process.cwd();function O(o){var p,l;const y=t.join(o,"package.json");let x=!1;if(e.existsSync(y))try{const f=JSON.parse(e.readFileSync(y,"utf-8"));x=!!((p=f.dependencies)!=null&&p["@remix-run/dev"])||!!((l=f.devDependencies)!=null&&l["@remix-run/dev"])}catch{}const m=t.join(o,"app","routes");if(x&&e.existsSync(m))return{framework:"remix",apiDir:"app/routes"};const S=e.existsSync(t.join(o,"app")),h=e.existsSync(t.join(o,"pages","api")),v=e.existsSync(t.join(o,"src","pages")),c=e.existsSync(t.join(o,"src"));return S?{framework:"next",apiDir:"app/api/exemption-iq"}:h?{framework:"next",apiDir:"pages/api/exemption-iq"}:v?{framework:"astro",apiDir:"src/pages/api/exemption-iq"}:c?{framework:"express",apiDir:"src/api/exemption-iq"}:{framework:"generic",apiDir:"api/exemption-iq"}}async function N(){console.log(`\u{1F680} ExemptionIQ CLI running!
`);const{framework:o,apiDir:y}=O(a),x=o==="remix",m=Object.fromEntries(Object.entries(A).map(([i,s])=>{if(x)return i==="certificate"?[i,["exemption-iq.certificate.$id.ts"]]:i==="token"?[i,["exemption-iq.gencert.token.ts"]]:[i,[`exemption-iq.${i}.ts`]];if(o==="astro"){const n=s.filter(u=>u!=="route.ts").map(u=>u==="[id]"?"[id]":u).join("-")+".ts";return[i,[n]]}return[i,s]})),S=t.join(a,y),h=t.dirname(process.argv[1]),v=t.resolve(h,"../../templates",o);if(!e.existsSync(v)){console.log(`\u274C No templates found for framework: ${o}`),k.close();return}k.close(),e.mkdirSync(S,{recursive:!0});const c=[];for(const[i,s]of Object.entries(m)){let D=function(g,$){if(g==="remix"||g==="astro"){const F=t.join(a,"vendor","exemption-iq","dist","server","helpers");let q=t.relative(t.dirname($),F).replace(/\\/g,"/");return q.startsWith(".")||(q="./"+q),q}return"@/vendor/exemption-iq/dist/server/helpers"};var I=D;const n=s[s.length-1],u=t.join(S,...s.slice(0,-1)),d=t.join(u,n),r=t.join(v,`${i}.template.ts`);if(!e.existsSync(r)){console.log(`\u26A0\uFE0F Skipping ${i} \u2014 template not found at: ${r}`);continue}e.mkdirSync(u,{recursive:!0});let j=e.readFileSync(r,"utf-8");const w=D(o,d);if(j=j.replace(/__EIQ_VENDOR__/g,w),e.existsSync(d))try{e.chmodSync(d,420)}catch(g){console.warn(`\u26A0\uFE0F Could not set ${n} to writable before update:`,g)}e.writeFileSync(d,j);try{e.chmodSync(d,292)}catch(g){console.warn(`\u26A0\uFE0F Could not set ${n} to read-only:`,g)}c.push(d)}const p=t.join(a,".gitignore"),l="vendor/";e.existsSync(p)?e.readFileSync(p,"utf-8").includes(l)||(e.appendFileSync(p,`
${l}`),console.log("\u{1F4C4} Added 'vendor/' to .gitignore")):(e.writeFileSync(p,`${l}
`),console.log("\u{1F4C4} Created .gitignore and added 'vendor/'"));try{const i=t.resolve(h,"../../templates");e.rmSync(i,{recursive:!0,force:!0}),console.log("\u{1F5D1}\uFE0F  Removed entire templates directory after scaffolding.")}catch(i){console.warn("\u26A0\uFE0F  Failed to remove templates directory:",i)}if(o==="astro"){const i=t.join(a,"astro.config.mjs");if(e.existsSync(i)){let s=e.readFileSync(i,"utf-8");const n=!s.includes("output:"),u=!s.includes("optimizeDeps")||!s.includes("exemption-iq");if(n||u){const d=s.indexOf("defineConfig({")+14;let r=s;n&&(r=r.slice(0,d)+`
  output: 'server',`+r.slice(d),console.log("\u{1F527} Patched Astro config with `output: 'server'`")),u&&(r.includes("vite:")?r=r.replace(/include:\s*\[([^\]]*)\]/,(w,g)=>`include: [${g.trim()?g+",":""} 'exemption-iq']`):r=r.slice(0,d)+`
    vite: {
      optimizeDeps: {
        include: ['exemption-iq']
      }
    },`+r.slice(d),console.log("\u{1F527} Patched Astro config with Vite optimizeDeps.include ['exemption-iq']")),e.writeFileSync(i,r,"utf-8")}else console.log("\u2705 Astro config already contains necessary vite + output settings.")}else console.warn("\u26A0\uFE0F Could not find astro.config.mjs to patch.")}const f=i=>{if(!e.existsSync(i))return;const s=e.readFileSync(i,"utf-8"),n=JSON.parse(C(s));n.compilerOptions=n.compilerOptions||{},n.compilerOptions.paths=n.compilerOptions.paths||{},n.compilerOptions.paths["exemption-iq"]?console.log(`\u2705 ${t.basename(i)} already includes exemption-iq path alias`):(n.compilerOptions.paths["exemption-iq"]=["./vendor/exemption-iq/dist/index"],e.writeFileSync(i,JSON.stringify(n,null,2)),console.log(`\u{1F527} Patched ${t.basename(i)} with exemption-iq path alias`))};(o==="next"||o==="remix")&&f(t.join(a,"tsconfig.json")),o==="astro"&&f(t.join(a,"tsconfig.app.json")),c.forEach(i=>console.log(`\u2705 Created ${i}`))}(async()=>{if(process.argv.slice(2).includes("--uninstall")){const y=t.join(a,"vendor","exemption-iq"),x=t.join(a,"package.json");let m=!1;if(e.existsSync(x)){const c=JSON.parse(e.readFileSync(x,"utf-8"));c.dependencies&&c.dependencies["exemption-iq"]&&(delete c.dependencies["exemption-iq"],e.writeFileSync(x,JSON.stringify(c,null,2)),console.log("\u{1F9F9} Removed 'exemption-iq' from package.json"),m=!0)}e.existsSync(y)&&(e.rmSync(y,{recursive:!0,force:!0}),console.log("\u{1F9FC} Deleted vendor/exemption-iq directory"),m=!0);const{framework:S,apiDir:h}=O(a),v=t.join(a,h);if(S==="remix"){const c=t.join(a,"app","routes"),p=["exemption-iq.certificate.$id.ts","exemption-iq.gencert.token.ts","exemption-iq.validate.ts","exemption-iq.customer.ts","exemption-iq.certificates.ts","exemption-iq.session.ts"];for(const l of p){const f=t.join(c,l);e.existsSync(f)&&(e.rmSync(f),console.log(`\u{1F9FC} Deleted ${l}`),m=!0)}}else if(e.existsSync(v))e.rmSync(v,{recursive:!0,force:!0}),console.log(`\u{1F9FC} Deleted scaffolded API route: ${h}`),m=!0;else if(S==="astro"){const c=t.join(a,"src","pages","api","exemption-iq"),p=["certificate-[id].ts","gencert-token.ts","validate.ts","customer.ts","certificates.ts","session.ts"];for(const l of p){const f=t.join(c,l);e.existsSync(f)&&(e.rmSync(f),console.log(`\u{1F9FC} Deleted ${l}`),m=!0)}}console.log(m?"\u2705 Uninstall complete.":"\u2139\uFE0F Nothing to uninstall. No exemption-iq dependency, vendor folder, or API route found."),k.close(),process.exit(0)}else await N()})();
